using System;
using System.Collections.Generic;
using System.Text;

namespace Question1
{
    class Encoder
    {
        //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        #region Public
        //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        //=====================================================================
        public Encoder()
        {
            m_transcode = CreateTranscode();
        }

        //=====================================================================
        public string Encode(string input)
        {
            foreach (char c in input.ToCharArray())
                if (c > MaxValueCharPlain)
                    throw new ArgumentOutOfRangeException("input has characteres not valid");

            return Encode(input, m_transcode);
        }

        //=====================================================================
        public string Decode(string input)
        {
            foreach (char c in input.ToCharArray())
                if (!m_transcode.Contains(c))
                        throw new ArgumentOutOfRangeException("input has characteres not valid");

            return Decode(input, m_transcode);
        }

        #endregion
        //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        #region Static Functions
        //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        //=====================================================================
        static string Encode(string input, string transcode)
        {
            string result = "";

            short reflex = 0;

            for (int j = 0; j < input.Length; j++)
            {
                reflex <<= 8;
                reflex += (short)input[j]; //input couldn't be higher or equeal that 2^8
                
                int x = ((j % 3) + 1) * 2;
                short mask = (short)(MaxValueCharChiper << x);

                int pivot = (reflex & mask) >> x;
                result += transcode[pivot];
                reflex &= (short)~mask;

                if (x == 6)
                {
                    mask >>= 6;
                    pivot = reflex & mask;
                    result += transcode[pivot];
                    reflex &= (short)~mask;

                }
            }

            switch (input.Length % 3)
            {
                case 1:
                    reflex <<= 4;
                    result += transcode[reflex];
                    break;

                case 2:
                    reflex <<= 2;
                    result += transcode[reflex];
                    break;
            }

            //reflex <<= 2;
            //result += transcode[reflex];

            return result;
        }

        //=====================================================================
        static string Decode(string input, string transcode)
        {
            string result = "";
            int reflex = 0;

            for (int j = 0; j < input.Length; j++)
            {
                reflex <<= 6;
                reflex += indexOf(input[j], transcode);

                int x = (3 - (j % 4)) * 2;

                if (x < 6)
                {
                    int mask = MaxValueCharPlain << x;
                    result += (char)((reflex & mask) >> x);
                    reflex &= ~mask;
                }
            }

            return result;
        }

        //=====================================================================
        static string CreateTranscode()
        {
            char[] result = new char[64];

            //Add uppercase
            for (int i = 0; i < 26; i++)
                result[i] = (char)((int)'A' + i);

            //Add lowercase
            for (int i = 0; i < 26; i++)
                result[i + 26] = (char)((int)'a' + i);

            //Add Number
            for (int i = 0; i < 10; i++)
                result[i + 52] = (char)((int)'0' + i);
            
            result[62] = '+';
            result[63] = '/'; 

            return new string(result);
        }

        //=====================================================================
        static short GetOriginMask()
        {
            int mask = 0xff00;
            return (short)mask;
        }

        //=====================================================================
        static int indexOf(char ch, string transcode)
        {
            int index;
            for (index = 0; index < transcode.Length; index++)
                if (ch == transcode[index])
                    return index;

            throw new Exception("Char are not generated by this Encoder");
        }


        #endregion
        //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        #region Fields
        //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        static string m_transcode;
        static int MaxValueCharPlain => 255;
        static int MaxValueCharChiper => m_transcode.Length - 1; 

        #endregion
    }
}
